const logger = require('../utils/logger');

async function testDeactivationRegex() {
  try {
    logger.info('üîç Probando regex de desactivaci√≥n...');
    
    const testTexts = [
      'desactivar conversaci√≥n',
      'desactivar conversacion',
      'DESACTIVAR CONVERSACI√ìN',
      'Desactivar conversaci√≥n',
      'detener conversaci√≥n',
      'salir',
      'stop bot',
      'exit chat',
      'hola como estas',
      'buscar informaci√≥n',
      'crear mascota'
    ];
    
    const regex = /\b(desactivar|detener|salir|stop|exit)\s*(conversaci[o√≥]n|bot|chat)\b/i;
    
    testTexts.forEach(text => {
      const shouldDeactivate = regex.test(text);
      logger.info(`"${text}" ‚Üí ${shouldDeactivate ? '‚úÖ DESACTIVAR' : '‚ùå NO DESACTIVAR'}`);
    });
    
    // Test espec√≠fico del problema
    logger.info('\nüéØ Test espec√≠fico:');
    const problemText = 'desactivar conversaci√≥n';
    const result = regex.test(problemText);
    logger.info(`"${problemText}" ‚Üí ${result ? '‚úÖ DETECTADO' : '‚ùå NO DETECTADO'}`);
    
    // Test individual de partes del regex
    logger.info('\nüîç An√°lisis del regex:');
    logger.info(`Palabra clave: ${/\b(desactivar|detener|salir|stop|exit)\b/i.test(problemText)}`);
    logger.info(`Palabra objetivo: ${/\b(conversaci[o√≥]n|bot|chat)\b/i.test(problemText)}`);
    logger.info(`Espacio entre palabras: ${/\s*/.test(' ')}`);
    
    process.exit(0);
    
  } catch (error) {
    logger.error('‚ùå Error en test de regex:', error);
    process.exit(1);
  }
}

testDeactivationRegex();

